Constraints
- There will never two streets connecting two intersections in the same direction.
- There is a trafic light one at every end of the street
- Each car starts at the same time at the end of the street.



Graph
- streets => edges
- Intersection => vortex

OPP 
Car as a Class:
 total_time-> waiting + running_time

- First is finding the actual path to travel.
  Car path can be an array. [1,2,3,4]
  BFS or DFS to find the path.

- Next step is optimizing traffic light.

# At a given time,
 = we find the car with shortest distance to destination.
 


# finding Intersection in paths of the car?
    maybe

# Two cars can't travel at the same time

# Each car travels at a rate of 1 second
 